using System;
using System.Collections.Generic;
using System.IO;

namespace KiyoAdventure
{
    class Program
    {
        static List<string> inventory = new List<string>();
        static bool hasCompletedJourney = false;
        static string currentLocation = "Forest Clearing";
        const string saveFile = "kiyo_savegame.txt";

        static void Main(string[] args)
        {
            MainMenu();
        }

        static void MainMenu()
        {
            Console.Clear();
            Console.WriteLine("Welcome to Kiyo's Adventure!");
            Console.WriteLine("1. New Game");
            Console.WriteLine("2. Load Game");
            Console.WriteLine("3. Credits");
            Console.WriteLine("4. Exit");

            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    StartGame();
                    break;
                case "2":
                    LoadGame();
                    break;
                case "3":
                    ShowCredits();
                    break;
                case "4":
                    ExitGame();
                    break;
                default:
                    Console.WriteLine("Invalid choice. Press any key to try again.");
                    Console.ReadKey();
                    MainMenu();
                    break;
            }
        }

        static void StartGame()
        {
            Console.Clear();
            inventory.Clear();
            hasCompletedJourney = false;
            currentLocation = "Forest Clearing";
            Console.WriteLine("Kiyo, a curious cat, wakes up in a mysterious forest clearing. Your journey home begins.");
            GameLoop();
        }

        static void ShowCredits()
        {
            Console.Clear();
            Console.WriteLine("Kiyo's Adventure");
            Console.WriteLine("Developed by: [Your Name]");
            Console.WriteLine("Special thanks to players like you!");
            Console.WriteLine("Press any key to return to the main menu.");
            Console.ReadKey();
            MainMenu();
        }

        static void ExitGame()
        {
            Console.Clear();
            Console.WriteLine("Thank you for guiding Kiyo on this journey. Goodbye!");
            Environment.Exit(0);
        }

        static void GameLoop()
        {
            Dictionary<string, string> locations = new Dictionary<string, string>
            {
                { "Forest Clearing", "You are in a peaceful clearing surrounded by towering trees." },
                { "Ancient Tree", "You approach a massive tree with glowing runes etched into its bark." },
                { "Abandoned Hut", "You find a small, weathered hut. It seems like it holds a secret." },
                { "Glittering Cavern", "A cavern filled with shimmering crystals. It feels magical." }
            };

            while (!hasCompletedJourney)
            {
                Console.Clear();
                Console.WriteLine(locations[currentLocation]);

                switch (currentLocation)
                {
                    case "Ancient Tree":
                        ExploreTree();
                        break;
                    case "Abandoned Hut":
                        InvestigateHut();
                        break;
                    case "Glittering Cavern":
                        EnterCavern();
                        break;
                }

                Console.WriteLine("\nWhere would you like to go?");
                Console.WriteLine("1. Ancient Tree");
                Console.WriteLine("2. Abandoned Hut");
                Console.WriteLine("3. Glittering Cavern");
                Console.WriteLine("4. Forest Clearing");
                Console.WriteLine("5. Save Game");

                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        currentLocation = "Ancient Tree";
                        break;
                    case "2":
                        currentLocation = "Abandoned Hut";
                        break;
                    case "3":
                        currentLocation = "Glittering Cavern";
                        break;
                    case "4":
                        currentLocation = "Forest Clearing";
                        break;
                    case "5":
                        SaveGame();
                        break;
                    default:
                        Console.WriteLine("Invalid choice. Press any key to try again.");
                        Console.ReadKey();
                        break;
                }
            }

            EndGame();
        }

        static void ExploreTree()
        {
            Console.WriteLine("The Ancient Tree hums with energy. You find a glowing feather at its base.");
            if (!inventory.Contains("Glowing Feather"))
            {
                Console.WriteLine("You pick up the glowing feather and feel a surge of warmth.");
                inventory.Add("Glowing Feather");
            }
            else
            {
                Console.WriteLine("You already have the glowing feather.");
            }
            Console.WriteLine("Press any key to continue.");
            Console.ReadKey();
        }

        static void InvestigateHut()
        {
            Console.WriteLine("Inside the hut, you find a riddle inscribed on the wall:");
            Console.WriteLine("'I speak without a mouth and hear without ears. I have no body, but I come alive with the wind. What am I?'");
            Console.WriteLine("1. Echo\n2. Shadow\n3. Silence");

            string answer = Console.ReadLine();
            if (answer == "1")
            {
                Console.WriteLine("The chest in the corner clicks open, revealing an ancient key.");
                if (!inventory.Contains("Ancient Key"))
                {
                    inventory.Add("Ancient Key");
                }
            }
            else
            {
                Console.WriteLine("Nothing happens. The chest remains locked.");
            }
            Console.WriteLine("Press any key to continue.");
            Console.ReadKey();
        }

        static void EnterCavern()
        {
            Console.WriteLine("The Glittering Cavern radiates with mystical energy. A pedestal blocks your path.");
            if (inventory.Contains("Glowing Feather") && inventory.Contains("Ancient Key"))
            {
                Console.WriteLine("You place the feather and key on the pedestal. The path opens before you!");
                hasCompletedJourney = true;
            }
            else
            {
                Console.WriteLine("You need both the glowing feather and the ancient key to proceed.");
            }
            Console.WriteLine("Press any key to continue.");
            Console.ReadKey();
        }

        static void SaveGame()
        {
            try
            {
                using (StreamWriter writer = new StreamWriter(saveFile))
                {
                    writer.WriteLine(currentLocation);
                    writer.WriteLine(hasCompletedJourney);
                    writer.WriteLine(string.Join(",", inventory));
                }
                Console.WriteLine("Game saved successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving game: {ex.Message}");
            }
            Console.WriteLine("Press any key to continue.");
            Console.ReadKey();
        }

        static void LoadGame()
        {
            if (File.Exists(saveFile))
            {
                try
                {
                    using (StreamReader reader = new StreamReader(saveFile))
                    {
                        currentLocation = reader.ReadLine();
                        hasCompletedJourney = bool.Parse(reader.ReadLine());
                        inventory = new List<string>(reader.ReadLine().Split(','));
                    }
                    Console.WriteLine("Game loaded successfully!");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading game: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("No save file found. Starting a new game.");
                StartGame();
            }
            Console.WriteLine("Press any key to continue.");
            Console.ReadKey();
        }

        static void EndGame()
        {
            Console.Clear();
            Console.WriteLine("Congratulations! Kiyo has found the way home.");
            Console.WriteLine("Summary of your journey:");
            foreach (var item in inventory)
            {
                Console.WriteLine($"  * {item}");
            }
            Console.WriteLine("\nThank you for playing Kiyo's Adventure!");
            Console.WriteLine("Press any key to return to the main menu.");
            Console.ReadKey();
            MainMenu();
        }
    }
}
